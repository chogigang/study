// 자료형 
void main() {
  

  //숫자 표현

 int a; // 부호 있는 정수 데이터 타입으로 8byte 크기를 가지고 있습니다. 
 //최소값: -9,223,372,036,854,775,808 (-2^63) 최대값: 9,223,372,036,854,775,807 (2^63 - 1)
 //923경

 double b; //8byte 부동 소수점 데이터 타입으로 실수값을 표현합니다.
 //최소값과 최대값은 -1.7976931348623157E+308부터 1.7976931348623157E+308까지 입니다.

 bool c; //true 또는 false 값을 가지는 불리언 데이터 타입 1bit입니다.

 String d; //유니코드 문자열을 표현하는 데 필요한 바이트 수에 따라 달라집니다.

 List e; //배열 과 같은 원리 이며 동적으로 크기가 조절되는 배열 입니다. 크기에 따라 달라집니다.

 Map f;//키와 값이 쌍으로 이루어진 객체, 크기에 따라 또 달라집니다.

 Set g; // 중복되지않은 요쇼들의 집합입니다. 크기에 따라 달라집니다.

Function h; //함수를 나타네는 객체입니다. 크기에 따라 달라집니다.

Enum i;// 8byte

Runes j; //유니코드 문자열을 표현하는 데 필요한 바이트 수에 따라 다름

Symbol k; //고유한 식별자를 나타내는 데이터 타입, 크기에 따라 다름

}

/*
Dart는 메모리 관리를 개발자가 직접 수행하지 않고, 가비지 컬렉터(Garbage Collector)를 통해 자동으로 수행됩니다.
가비지 컬렉터는 더 이상 사용되지 않는 객체들을 자동으로 파괴하여 메모리를 해제합니다.
이러한 가비지 컬렉션 기능은 개발자가 데이터 타입을 선언할 때 메모리 크기를 고려하지 않도록 하며,
개발자는 데이터 타입을 적절하게 선택하여 코드를 작성하면 됩니다.
예를 들어, int와 double은 모두 8바이트의 메모리 공간을 차지하며,
개발자는 이를 고려하여 데이터 타입을 선택할 필요가 없습니다. 또한,
가비지 컬렉터가 자동으로 메모리 관리를 수행하기 때문에, 개발자가 직접 메모리를 해제하는 코드를 작성할 필요도 없습니다.
이러한 기능들은 다트의 안정성과 생산성을 높이는 데 큰 역할을 합니다.
*/